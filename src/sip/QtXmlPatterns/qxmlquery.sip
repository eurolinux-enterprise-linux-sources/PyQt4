// qxmlquery.sip generated by MetaSIP on Thu Nov 19 17:40:23 2009
//
// This file is part of the QtXmlPatterns Python extension module.
//
// Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QXmlQuery
{

%TypeHeaderCode
#include <qxmlquery.h>
%End

public:
%If (Qt_4_5_0 -)

    enum QueryLanguage
    {
        XQuery10,
        XSLT20,
    };

%End
    QXmlQuery();
    QXmlQuery(const QXmlQuery &other);
    QXmlQuery(const QXmlNamePool &np);
%If (Qt_4_5_0 -)
    QXmlQuery(QXmlQuery::QueryLanguage queryLanguage, const QXmlNamePool &np = QXmlNamePool());
%End
    ~QXmlQuery();
    void setMessageHandler(QAbstractMessageHandler *messageHandler);
    QAbstractMessageHandler *messageHandler() const;
    void setQuery(const QString &sourceCode, const QUrl &documentURI = QUrl());
    void setQuery(QIODevice *sourceCode, const QUrl &documentURI = QUrl());
    void setQuery(const QUrl &queryURI, const QUrl &baseURI = QUrl());
    QXmlNamePool namePool() const;
    void bindVariable(const QXmlName &name, const QXmlItem &value);
    void bindVariable(const QXmlName &name, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QXmlName &name, const QXmlQuery &query);
%End
    void bindVariable(const QString &localName, const QXmlItem &value);
    void bindVariable(const QString &localName, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QString &localName, const QXmlQuery &query);
%End
    bool isValid() const;
    void evaluateTo(QXmlResultItems *result) const;
    bool evaluateTo(QAbstractXmlReceiver *callback) const;
%If (Qt_4_5_0 -)
    bool evaluateTo(QIODevice *target) const;
%End
    void setUriResolver(const QAbstractUriResolver *resolver);
    const QAbstractUriResolver *uriResolver() const;
    void setFocus(const QXmlItem &item);
%If (Qt_4_5_0 -)
    bool setFocus(const QUrl &documentURI);
%End
%If (Qt_4_5_0 -)
    bool setFocus(QIODevice *document);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QXmlName &name);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QString &name);
%End
%If (Qt_4_5_0 -)
    QXmlName initialTemplateName() const;
%End
%If (Qt_4_5_0 -)
    void setNetworkAccessManager(QNetworkAccessManager *newManager);
%End
%If (Qt_4_5_0 -)
    QNetworkAccessManager *networkAccessManager() const;
%End
%If (Qt_4_5_0 -)
    QXmlQuery::QueryLanguage queryLanguage() const;
%End
};

%End
