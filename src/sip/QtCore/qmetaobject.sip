// qmetaobject.sip generated by MetaSIP on Thu Nov 19 17:40:22 2009
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QMetaMethod
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

%TypeCode
// Raise an exception when QMetaMethod::invoke() returns false.
static void qtcore_invoke_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaMethod.invoke() call failed");
}
%End

public:
    QMetaMethod();
    const char *signature() const;
    const char *typeName() const;
    QList<QByteArray> parameterTypes() const;
    QList<QByteArray> parameterNames() const;
    const char *tag() const;

    enum Access
    {
        Private,
        Protected,
        Public,
    };

    QMetaMethod::Access access() const;

    enum MethodType
    {
        Method,
        Signal,
        Slot,
%If (Qt_4_5_0 -)
        Constructor,
%End
    };

    QMetaMethod::MethodType methodType() const;
%If (Qt_4_5_0 -)
    SIP_PYOBJECT invoke(QObject *object, Qt::ConnectionType connectionType, QGenericReturnArgument returnValue /GetWrapper/, QGenericArgument val0 = QGenericArgument(0, 0), QGenericArgument val1 = QGenericArgument(0, 0), QGenericArgument val2 = QGenericArgument(0, 0), QGenericArgument val3 = QGenericArgument(0, 0), QGenericArgument val4 = QGenericArgument(0, 0), QGenericArgument val5 = QGenericArgument(0, 0), QGenericArgument val6 = QGenericArgument(0, 0), QGenericArgument val7 = QGenericArgument(0, 0), QGenericArgument val8 = QGenericArgument(0, 0), QGenericArgument val9 = QGenericArgument(0, 0)) const;
%MethodCode
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11,
                *a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invoke_exception();
%End

%End
%If (Qt_4_5_0 -)
    SIP_PYOBJECT invoke(QObject *object, QGenericReturnArgument returnValue /GetWrapper/, QGenericArgument val0 = QGenericArgument(0, 0), QGenericArgument val1 = QGenericArgument(0, 0), QGenericArgument val2 = QGenericArgument(0, 0), QGenericArgument val3 = QGenericArgument(0, 0), QGenericArgument val4 = QGenericArgument(0, 0), QGenericArgument val5 = QGenericArgument(0, 0), QGenericArgument val6 = QGenericArgument(0, 0), QGenericArgument val7 = QGenericArgument(0, 0), QGenericArgument val8 = QGenericArgument(0, 0), QGenericArgument val9 = QGenericArgument(0, 0)) const;
%MethodCode
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10,
                *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a1Wrapper);
        else
            qtcore_invoke_exception();
%End

%End
%If (Qt_4_5_0 -)
    SIP_PYOBJECT invoke(QObject *object, Qt::ConnectionType connectionType, QGenericArgument val0 = QGenericArgument(0, 0), QGenericArgument val1 = QGenericArgument(0, 0), QGenericArgument val2 = QGenericArgument(0, 0), QGenericArgument val3 = QGenericArgument(0, 0), QGenericArgument val4 = QGenericArgument(0, 0), QGenericArgument val5 = QGenericArgument(0, 0), QGenericArgument val6 = QGenericArgument(0, 0), QGenericArgument val7 = QGenericArgument(0, 0), QGenericArgument val8 = QGenericArgument(0, 0), QGenericArgument val9 = QGenericArgument(0, 0)) const;
%MethodCode
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
%End

%End
%If (Qt_4_5_0 -)
    SIP_PYOBJECT invoke(QObject *object, QGenericArgument val0 = QGenericArgument(0, 0), QGenericArgument val1 = QGenericArgument(0, 0), QGenericArgument val2 = QGenericArgument(0, 0), QGenericArgument val3 = QGenericArgument(0, 0), QGenericArgument val4 = QGenericArgument(0, 0), QGenericArgument val5 = QGenericArgument(0, 0), QGenericArgument val6 = QGenericArgument(0, 0), QGenericArgument val7 = QGenericArgument(0, 0), QGenericArgument val8 = QGenericArgument(0, 0), QGenericArgument val9 = QGenericArgument(0, 0)) const;
%MethodCode
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
%End

%End
};

class QMetaEnum
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaEnum();
    const char *name() const;
    bool isFlag() const;
    int keyCount() const;
    const char *key(int index) const;
    int value(int index) const;
    const char *scope() const;
    int keyToValue(const char *key) const;
    const char *valueToKey(int value) const;
    int keysToValue(const char *keys) const;
    QByteArray valueToKeys(int value) const;
    bool isValid() const;
};

class QMetaProperty
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaProperty();
    const char *name() const;
    const char *typeName() const;
    QVariant::Type type() const;
    bool isReadable() const;
    bool isWritable() const;
    bool isDesignable(const QObject *obj = 0) const;
    bool isScriptable(const QObject *obj = 0) const;
    bool isStored(const QObject *obj = 0) const;
    bool isEditable(const QObject *obj = 0) const;
    bool isFlagType() const;
    bool isEnumType() const;
    QMetaEnum enumerator() const;
    QVariant read(const QObject *obj) const;
    bool write(QObject *obj, const QVariant &value) const;
    bool reset(QObject *obj) const;
    bool hasStdCppSet() const;
    bool isValid() const;
    bool isResettable() const;
    bool isUser(const QObject *obj = 0) const;
%If (Qt_4_2_0 -)
    int userType() const;
%End
%If (Qt_4_5_0 -)
    bool hasNotifySignal() const;
%End
%If (Qt_4_5_0 -)
    QMetaMethod notifySignal() const;
%End
%If (Qt_4_5_0 -)
    int notifySignalIndex() const;
%End
};

class QMetaClassInfo
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaClassInfo();
    const char *name() const;
    const char *value() const;
};
