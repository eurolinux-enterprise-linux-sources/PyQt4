// quuid.sip generated by MetaSIP on Thu Nov 19 17:40:22 2009
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <quuid.h>
%End

struct QUuid
{

%TypeHeaderCode
#include <quuid.h>
%End

    enum Variant
    {
        VarUnknown,
        NCS,
        DCE,
        Microsoft,
        Reserved,
    };

    enum Version
    {
        VerUnknown,
        Time,
        EmbeddedPOSIX,
        Name,
        Random,
    };

    QUuid();
    QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8);
    QUuid(const QString &);
    SIP_PYOBJECT __repr__() const;
%MethodCode
        #if PY_MAJOR_VERSION >= 3
        PyObject *py = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (py)
        {
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QUuid(%R)", py);
            Py_DECREF(py);
        }
        else
        {
            sipRes = 0;
        }
        #else
        QByteArray s = sipCpp->toString().toAscii();
        sipRes = PyString_FromFormat("PyQt4.QtCore.QUuid(\"%s\")", s.data());
        #endif
%End

    QString toString() const;
    bool isNull() const;
    bool operator==(const QUuid &orig) const;
    bool operator!=(const QUuid &orig) const;
    bool operator<(const QUuid &other) const;
    bool operator>(const QUuid &other) const;
    static QUuid createUuid();
    QUuid::Variant variant() const;
    QUuid::Version version() const;
    operator QString() const;
};

QDataStream &operator<<(QDataStream &, const QUuid & /Constrained/);
QDataStream &operator>>(QDataStream &, QUuid & /Constrained/);
