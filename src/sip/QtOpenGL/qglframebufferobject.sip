// qglframebufferobject.sip generated by MetaSIP on Thu Nov 19 17:40:23 2009
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QGLFramebufferObject : QPaintDevice
{

%TypeHeaderCode
#include <qglframebufferobject.h>
%End

public:
%If (Qt_4_3_0 -)

    enum Attachment
    {
        NoAttachment,
        CombinedDepthStencil,
        Depth,
    };

%End
    QGLFramebufferObject(const QSize &size, GLenum target = GL_TEXTURE_2D);
    QGLFramebufferObject(int width, int height, GLenum target = GL_TEXTURE_2D);
%If (Qt_4_3_0 -)
    QGLFramebufferObject(const QSize &size, QGLFramebufferObject::Attachment attachment, GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);
%End
%If (Qt_4_3_0 -)
    QGLFramebufferObject(int width, int height, QGLFramebufferObject::Attachment attachment, GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);
%End
    virtual ~QGLFramebufferObject();
%If (Qt_4_3_0 -)
    QGLFramebufferObject::Attachment attachment() const;
%End
    bool isValid() const;
    bool bind();
%If (Qt_4_5_0 -)
    bool isBound() const;
%End
    bool release();
    GLuint texture() const;
%If (Qt_4_4_0 -)
    void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
%End
%If (Qt_4_4_0 -)
    void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
%End
    QSize size() const;
    QImage toImage() const;
    virtual QPaintEngine *paintEngine() const;
    GLuint handle() const;
    static bool hasOpenGLFramebufferObjects();

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric metric) const;

private:
    QGLFramebufferObject(const QGLFramebufferObject &);
};

%End
